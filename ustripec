#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright Â© 2010  Infonium Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from optparse import OptionParser
import socket
import subprocess
import os
import sys

if __name__ == '__main__':
    # Parse arguments
    parser = OptionParser(usage="usage: %prog [options] SOCKNAME COMMAND ARG...")
    parser.disable_interspersed_args()
    parser.add_option("-p", "--printable", help="only include printable ASCII characters", action="store_true", dest="printable")
    parser.add_option("-e", "--exit-on-error", help="exit if COMMAND returns an error", action="store_true", dest="exit_on_error")
    parser.add_option("-t", "--tracks", help="include tracks (comma separated)", dest="tracks", metavar="TRACKS", default="1,2")
    (options, args) = parser.parse_args()
    sockname = args.pop(0)  # shift

    tracks = tuple(int(n) for n in options.tracks.split(","))
    for track in tracks:
        if not 1 <= track <= 3:
            print >>sys.stderr, "error: invalid tracks"
            sys.exit(2)

    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    try:
        sock.connect(sockname)
    except:
        sys.exit(1)     # exit silently if the socket does not exist
    rfile = sock.makefile("r")

    for line in rfile:
        # Parse the line
        line = line.rstrip()
        if not line.startswith("S:"):
            continue
        fields = line.split(":")
        card_encode_type = int(fields[1],16)
        track1 = fields[2].decode('hex')
        track2 = fields[3].decode('hex')
        track3 = fields[4].decode('hex')

        env = os.environ.copy()
        env.update({ "CARD_ENCODE_TYPE": str(card_encode_type) }) 

        data = ""
        if track1 and (1 in tracks): data += track1 + "\n"
        if track2 and (2 in tracks): data += track2 + "\n"
        if track3 and (3 in tracks): data += track3 + "\n"

        if options.printable:
            # Keep only printable characters and newline
            data = "".join(c for c in data if c == "\n" or 0x20 <= ord(c) <= 0x7e)
            # Replace CR with LF
            data = data.replace("\r", "\n")

        proc = subprocess.Popen(args, stdin=subprocess.PIPE, env=env)
        proc.stdin.write(data)
        proc.stdin.close()
        proc.wait()

        if options.exit_on_error and proc.returncode != 0:
            exit((proc.returncode >> 8) or 1)

# vim:set ts=4 sw=4 sts=4 expandtab:
