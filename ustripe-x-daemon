#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright Â© 2010  Infonium Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import Xlib.display
import Xlib.error
import subprocess
import select
import os
import signal

# Parameters
SOCKNAME = "/var/run/ustripe/ustriped.sock"
COMMAND = ["ustripec", "--printable", "--decode", SOCKNAME, "ustripe-injectkeys", "--beep"]

def spawn_child(args):
  # Create the child process, and a pipe that we'll pass to select() to detect when the child process exits.
  child_pipe, child_pipe_b = os.pipe()
  proc = subprocess.Popen(args, preexec_fn=lambda: os.close(child_pipe))
  os.close(child_pipe_b)
  return (proc, child_pipe)

if __name__ == '__main__':
  # Open connection to the X11 display
  dpy = Xlib.display.Display()

  done = False
  proc, child_pipe = spawn_child(COMMAND)
  while not done:
    rr,ww,ee = select.select([dpy, child_pipe], [], [])

    if child_pipe in rr:
      os.close(child_pipe)
      assert proc.poll() is not None
      proc.wait()
      proc, child_pipe = spawn_child(COMMAND)

    if dpy in rr:
      try:
        dpy.next_event()
      except Exception:
        done = True

  proc.send_signal(signal.SIGHUP)
  proc.wait()
