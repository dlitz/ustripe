#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright Â© 2010  Infonium Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


from optparse import OptionParser
import array
import struct
import socket
import select
import os
import pwd
import time
import sys
from fcntl import ioctl

# Constants from hiddev.h
HID_VERSION = 0x010004
HIDIOCGVERSION = 0x80044801
HIDIOCGFLAG = 0x8004480e
HIDIOCSFLAG = 0x4004480f
HIDDEV_FLAG_UREF = 1
HIDDEV_FLAG_REPORT = 2
HID_FIELD_INDEX_NONE = 0xffffffff

# HID usage pages
MODEL_DATA = {
    # ID Tech format:
    # Offset    Usage
    # 0         Track 1 decode status
    # 1         Track 2 decode status
    # 2         Track 3 decode status
    # 3         Track 1 data length
    # 4         Track 2 data length
    # 5         Track 3 data length
    # 6         Card encode type
    # 7,8       Total output length
    # 9-508     Output data
    "idtech": {
        "CARDREADER_USAGE_PAGE": 0xff00,      # vendor-defined
        "TRACK1_DECODE_STATUS": 0x20,
        "TRACK2_DECODE_STATUS": 0x21,
        "TRACK3_DECODE_STATUS": 0x22,
        "TRACK1_DATA_LENGTH": 0x28,
        "TRACK2_DATA_LENGTH": 0x29,
        "TRACK3_DATA_LENGTH": 0x2A,
        "CARD_ENCODE_TYPE": 0x38,
        "OUTPUT_DATA": 0x31,
        "size": 509,
    },

    # MagTek format:
    # Offset    Usage
    # 0         Track 1 decode status
    # 1         Track 2 decode status
    # 2         Track 3 decode status
    # 3         Track 1 data length
    # 4         Track 2 data length
    # 5         Track 3 data length
    # 6         Card encode type
    # 7-116     Track 1 data
    # 117-226   Track 2 data
    # 227-336   Track 3 data
    "magtek": {
        "CARDREADER_USAGE_PAGE": 0xff00,      # vendor-defined
        "TRACK1_DECODE_STATUS": 0x20,
        "TRACK2_DECODE_STATUS": 0x21,
        "TRACK3_DECODE_STATUS": 0x22,
        "TRACK1_DATA_LENGTH": 0x28,
        "TRACK2_DATA_LENGTH": 0x29,
        "TRACK3_DATA_LENGTH": 0x2A,
        "TRACK1_DATA": 0x30,
        "TRACK2_DATA": 0x31,
        "TRACK3_DATA": 0x32,
        "CARD_ENCODE_TYPE": 0x38,
        "size": 337,
    },
}


class HidParser(object):
    def __init__(self, client_sockets, model=None, verbose=False):
        self.client_sockets = client_sockets
        self.model = model
        self.mdata = MODEL_DATA[model]
        self.verbose = verbose
        self.reset()

    def reset(self):
        self.count = 0
        self.track1_decode_ok = None
        self.track2_decode_ok = None
        self.track3_decode_ok = None
        self.track1_data_length = None
        self.track2_data_length = None
        self.track3_data_length = None
        self.card_encode_type = None
        if self.model == "idtech":
            self.data = []
        elif self.model == "magtek":
            self.track1_data = []
            self.track2_data = []
            self.track3_data = []

    def process(self, usage, value):
        self.count += 1
        if usage == self.mdata["TRACK1_DECODE_STATUS"]:
            self.track1_decode_ok = (value == 0)
        elif usage == self.mdata["TRACK2_DECODE_STATUS"]:
            self.track2_decode_ok = (value == 0)
        elif usage == self.mdata["TRACK3_DECODE_STATUS"]:
            self.track3_decode_ok = (value == 0)
        elif usage == self.mdata["TRACK1_DATA_LENGTH"]:
            self.track1_data_length = value
        elif usage == self.mdata["TRACK2_DATA_LENGTH"]:
            self.track2_data_length = value
        elif usage == self.mdata["TRACK3_DATA_LENGTH"]:
            self.track3_data_length = value
        elif usage == self.mdata["CARD_ENCODE_TYPE"]:
            self.card_encode_type = value
        elif usage == self.mdata.get("OUTPUT_DATA"):
            # idtech
            self.data.append(value)
        elif usage == self.mdata.get("TRACK1_DATA"):
            if len(self.track1_data) < self.track1_data_length:
                self.track1_data.append(value)
        elif usage == self.mdata.get("TRACK2_DATA"):
            if len(self.track2_data) < self.track2_data_length:
                self.track2_data.append(value)
        elif usage == self.mdata.get("TRACK3_DATA"):
            if len(self.track3_data) < self.track3_data_length:
                self.track3_data.append(value)
        if self.model == "idtech" and self.count == self.mdata["size"]:
            # Response data is in Turbo TLP-224 format:
            #           <ACK> <Length> <Command> <LRC> <ETX>
            # or:
            #           <NACK> <Length> <Status> <LRC> <ETX>
            # - ACK:  "\x60"
            # - NACK: "\xE0"
            # - ETX:  "\x03"
            # - Length: Two-byte length of <Command> or <Status>
            if True or self.data[0] == 0x60:  # ACK
                p = 5       # Skip the preamble
                self.track1_data = self.data[p:p+self.track1_data_length]; p += self.track1_data_length
                p += 1      # Skip "\r"
                self.track2_data = self.data[p:p+self.track2_data_length]; p += self.track2_data_length
                p += 1      # Skip "\r"
                self.track3_data = self.data[p:p+self.track3_data_length]; p += self.track3_data_length
                self.output_data()
        elif self.model == "magtek" and self.count == self.mdata["size"]:
            self.output_data()

    def output_data(self):
        # Format for card swipe:
        #   S:<card-encode-type>:<track1data>:<track2data>:<track3data>
        # Where each field is hexadecimal-encoded.
        if not self.track1_decode_ok or not self.track2_decode_ok or not self.track3_decode_ok:
            return      # Don't output anything when we don't encode OK
        if not self.track1_data and not self.track2_data and not self.track3_data:
            return      # Don't output anything when we don't have any swipe data
        track1data = "".join(chr(v) for v in self.track1_data).encode('hex')
        track2data = "".join(chr(v) for v in self.track2_data).encode('hex')
        track3data = "".join(chr(v) for v in self.track3_data).encode('hex')
        output = "S:%x:%s:%s:%s\n" % (self.card_encode_type, track1data, track2data, track3data)
        if self.verbose:
            sys.stdout.write(output)
            #print "DEBUG: %r:%r:%r" % (track1data.decode('hex'), track2data.decode('hex'), track3data.decode('hex'))
        for client_socket in client_sockets:
            client_socket.send(output)

if __name__ == '__main__':
    # Parse arguments
    parser = OptionParser(usage="usage: %prog [options] DEVNAME SOCKNAME")
    parser.add_option("-m", "--mode", help="set permissions on the socket to MODE", type="int", dest="mode", metavar="MODE")
    parser.add_option("-u", "--user", help="switch to USERNAME after opening files/sockets", dest="user", metavar="USERNAME")
    parser.add_option("-M", "--model", help="set card reader model", type="string", dest="model", metavar="NAME", default="idtech")
    parser.add_option("-v", "--verbose", help="verbose output", action="store_true", dest="verbose")
    parser.epilog = "Supported card reader models: idtech magtek"
    (options, args) = parser.parse_args()
    (devname, sockname) = args

    # Record structure when reading from /dev/usb/hiddev*:
    #   struct hiddev_event {
    #         unsigned hid;
    #         signed int value;
    #   }
    #
    # Record structure when reading from /dev/usb/hiddev*, after we've set HIDDEV_FLAG_UREF
    #
    #   struct hiddev_usage_ref {
    #           __u32 report_type;
    #           __u32 report_id;
    #           __u32 field_index;
    #           __u32 usage_index;
    #           __u32 usage_code;
    #           __s32 value;
    #   };
    struct_hiddev_usage_ref = "@IIIIIi"
    read_size = struct.calcsize(struct_hiddev_usage_ref)

    # Open devices
    hiddev = open(devname, "rb", 0)     # NOTE: Input must be unbuffered
    # Use ioctl so that we read hiddev_usage_ref instead of hiddev_event, and so that we get events between reports.
    ioctl(hiddev.fileno(), HIDIOCSFLAG, array.array("i", [HIDDEV_FLAG_UREF | HIDDEV_FLAG_REPORT]))
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.setblocking(False)

    # Bind the socket and set permissions
    if options.mode is None:
        sock.bind(sockname)
    else:
        old_mask = os.umask(0777)
        try:
            sock.bind(sockname)
            os.chmod(sockname, options.mode)
        finally:
            os.umask(old_mask)

    if options.user:
        # Drop privileges
        u = pwd.getpwnam(options.user)
        os.setgroups([])
        os.setgid(u.pw_gid)
        os.setuid(u.pw_uid)

    sock.listen(5)
    client_sockets = []

    # Create parser
    parser = HidParser(client_sockets, model=options.model, verbose=options.verbose)
    buf = "x"
    while buf:
        rr, ww, ee = select.select([hiddev, sock] + client_sockets, [], [])
        if hiddev in rr:
            rr.remove(hiddev)
            buf = hiddev.read(read_size)
            report_type, report_id, field_index, usage_index, usage_code, value = struct.unpack(struct_hiddev_usage_ref, buf)
            #if options.verbose: print `"%.3f" % time.time(), hex(report_type), hex(report_id), hex(field_index), hex(usage_index), hex(usage_code), hex(value), chr(value)`
            if field_index == HID_FIELD_INDEX_NONE:
                parser.reset()
            usage_page = ((usage_code >> 16) & 0xffff)
            usage = usage_code & 0xffff
            if usage_page != MODEL_DATA[options.model]["CARDREADER_USAGE_PAGE"]:
                continue
            parser.process(usage, value)
        if sock in rr:
            rr.remove(sock)
            (s, remote_addr) = sock.accept()
            s.setblocking(False)
            client_sockets.append(s)
        for client_socket in rr:
            data = client_socket.recv(1024)        # non-blocking read
            if not data:    # socket closed
                client_socket.close()
                client_sockets.remove(client_socket)

# vim:set ts=4 sw=4 sts=4 expandtab:
